myVar
# dim and dimnames are just attributes of myVar vector
attributes(myVar)
# Back to simple vector
dim(myVar) <- NULL
myVar
# A scalar is just a vector with 1 element.
myVar <- 1
myVar
myVar <- c(1:12)
myVar
myVar <- c(1:12)
myVar
myVar <- c(1:12)
myVar
myVar <- c(1:12)
myVar
dim(myVar) <- c(2,6)
myVar
myVar <- c(1:12)
myVar
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
# Array with 3 dimensions
# Also set dimnames
dim(myVar) <- c(2,3,2)
dimnames(myVar)[[1]] <- list("R1","R2")
dimnames(myVar)[[2]] <- list("A","B", "C")
dimnames(myVar)[[3]] <- list("M1", "M2")
myVar
# dim and dimnames are attributes on vector
attributes(myVar)
# Back to simple vector
dim(myVar) <- NULL
myVar
# A scalar is just a vector with 1 element.
myVar <- 1
myVar
myVar <- c(1:12)
myVar
dim(myVar) <- c(2,6)
myVar
dim(myVar) <- c(2,3,2)
dimnames(myVar)[[1]] <- list("R1","R2")
dimnames(myVar)[[2]] <- list("A","B", "C")
dimnames(myVar)[[3]] <- list("M1", "M2")
myVar
attributes(myVar)
dim(myVar) <- NULL
myVar
myVar <- 1
myVar
myVar <- c(1:12)
myVar
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
# Array with 3 dimensions
# Also set dimnames
dim(myVar) <- c(2,3,2)
dimnames(myVar)[[1]] <- list("R1","R2")
dimnames(myVar)[[2]] <- list("A","B", "C")
dimnames(myVar)[[3]] <- list("M1", "M2")
myVar
# dim and dimnames are attributes on vector
attributes(myVar)
# Back to simple vector
dim(myVar) <- NULL
myVar
# A scalar is just a vector with 1 element.
myVar <- 1
myVar
myVector <- c("low", "high", "Med", "low")
myFacor <- factor(myVector)
myFactor
myFactor <- factor(myVector)
myFactor
myFactor <- factor(myVector, levels = c("low", "med, "high""))
myFactor <- factor(myVector, levels = c("low", "med, "high"))
myFactor <- factor(myVector, levels = c("low", "med", "high"))
myFactor
myVector <- c("low", "high", "med", "low")
myFactor <- factor(myVector, levels = c("low", "med", "high"))
myFactor
myFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myFactor
myVector <- c("low", "high", "med", "low")
myFactor <- factor(myVector)
myFactor
myVector <- c("low", "high", "med", "low")
myFactor <- factor(myVector)
myFactor
myOrderedFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myOrderedFactor
attributes(myOrderedFactor)
attributes(myFactor)
myList <- list(TRUE, 123L, 6.5, c(1,2,3))
dim(myVar) <- c(2,6)
myVar
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
myVar <- matrix(1:12,2,6)
myVar
dim(myVar) <- c(2,6)
myVar
myVar <- matrix(1:12,2,6)
myVar
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
myVar <- matrix(1:12,2,6)
myVar
myVar <- matrix(1:12,2,6)
myVar
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
myMatrix <- matrix(1:12, 2, 6)
myMatrix
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
myMatrix <- matrix(1:12, 2, 6)
myMatrix
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
# Array with 3 dimensions
# Also set dimnames
dim(myVar) <- c(2,3,2)
dimnames(myVar)[[1]] <- list("R1","R2")
dimnames(myVar)[[2]] <- list("A","B", "C")
dimnames(myVar)[[3]] <- list("M1", "M2")
myVar
# dim and dimnames are attributes on vector
attributes(myVar)
# Back to simple vector
dim(myVar) <- NULL
myVar
# A scalar is just a vector with 1 element.
myVar <- 1
myVar
myVector <- c("low", "high", "med", "low")
# Create a Factor
myFactor <- factor(myVector)
myFactor
# Create an ordered Factor
myOrderedFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myOrderedFactor
attributes(myFactor)
attributes(myOrderedFactor)
# A list can hold different types
myList <- list(TRUE, 123L, 6.5, c(1,2,3))
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
df = data.frame(n, s, b, function() {return(1)})
# Data Frame
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
f <- function () { return(1:3)}
df = data.frame(n, s, b, f)
# Data Frame
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
myList <- list(TRUE, 123L, 6.5, c(1,2,3), function() { return(123)})
myList <- list(TRUE, 123L, 6.5, c(1,2,3), function(x) { return(x*2)})
# A list can hold different types, even functions
f <- function(x) { return(x*2)
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
# A list can hold different types, even functions
f <- function(x) { return(x*2)
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
f <- function(x) { return(x*2) }
f
<
f <- function(x) { return(x*2) }
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
# A list can hold different types, even functions
f <- function(x) { return(x*2) }
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
myVector <- c("low", "high", "med", "low")
# Create a Factor
myFactor <- factor(myVector)
myFactor
# Create an ordered Factor
myOrderedFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myOrderedFactor
attributes(myFactor)
attributes(myOrderedFactor)
# Data Frame
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
# A list can hold different types, even functions
f <- function(x) { return(x*2) }
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
myVector <- c("low", "high", "med", "low")
# Create a Factor
myFactor <- factor(myVector)
myFactor
# Create an ordered Factor
myOrderedFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myOrderedFactor
# Data Frame
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
# A list can hold different types, even functions
f <- function(x) { return(x*2) }
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
matrix(c(1,2,3,4,5,6), 2, 3)
m <- permutations(n = 3, r = 3)
library(gtools)
m <- permutations(n = 3, r = 3)
View(m)
View(m)
m[1,]   # 1st row.  Vector of numbers
m[,2]   # 2nd col.  Vector of numbers
m[1,2]  # Value at row = 1 and col = 2.  ARRAY of 1 element
m[1:3,]   # Rows 1,2,3
matrix(c(1,2,3,4,5,6), 2, 3)
matrix(c(1,2,3,4,5,6), 2, 3)
m <- permutations(n = 4, r = 4)
View(m)
m[1,]   # 1st row.  Vector of numbers
m[,2]   # 2nd col.  Vector of numbers
m[1,2]  # Value at row = 1 and col = 2.  ARRAY of 1 element
1:3       # Vector with values 1,2,3
m[1:3,]   # Rows 1,2,3
m[,1] + m[,2]              # Vector (Vectorize)
matrix(c(1,2,3,4,5,6), 2, 3)
m <- permutations(n = 3, r = 3)
View(m)
m[1,]   # 1st row.  Vector of numbers
m[,2]   # 2nd col.  Vector of numbers
1:3       # Vector with values 1,2,3
c(T,T,T,T,F,F)     # Vector of logical
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              # Vector (Vectorize)
m[,1] + m[,2] == m[,3]     # Test rows (Vectorize)
m[m[,1] + m[,2] == m[,3],] # Select rows matching test
# install.packages("gtools")
# help(package="gtools")
# Create a MATRIX with 2 rows and 3 cols, with data 1,2,3,4,5,6
matrix(c(1,2,3,4,5,6), 2, 3)
# Load package gtools
# Create a MATRIX with all permutation of digits 1,2,3
library(gtools)
m <- permutations(n = 3, r = 3)
m[1,]   # 1st row.  Vector of numbers
m[,2]   # 2nd col.  Vector of numbers
m[1,2]  # Value at row = 1 and col = 2.  ARRAY of 1 element
1:3       # Vector with values 1,2,3
m[1:3,]   # Rows 1,2,3
c(T,T,T,T,F,F)     # Vector of logical
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              # Vector (Vectorize)
m[,1] + m[,2] == m[,3]     # Test rows (Vectorize)
m[m[,1] + m[,2] == m[,3],] # Select rows matching test
m <- permutations(n = 9, r = 9)
View(m)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
# library(gtools)
# Using a DATAFRAME
df <- data.frame(permutations(9, 9))
df.a <- subset(df, 3 * (X1*1000 + X2*100 + X3*10 + X4) ==
(X5*10000 + X6*1000 + X7*100 + X8*10 + X9))
View(df.a)
View(df)
View(m)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
x <- rolls[6028,]
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
outcome <- (ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
View(rolls)
View(x)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
View(rolls)
m <- mean(rolls$outcomes)
ggplot(data = rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue", col = "black") +
labs(title = "Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x = sprintf("Attacker Outcome: EV = %f", m), y = "Count")
library(ggplot2)
ggplot(data = rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue", col = "black") +
labs(title = "Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x = sprintf("Attacker Outcome: EV = %f", m), y = "Count")
# TWO LINES OF CODE IN R
m <- permutations(n = 9, r = 9)
library(gtools)
m <- permutations(n = 9, r = 9)
View(m)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m <- permutations(n = 9, r = 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
5823/17469
5832/17496
m.a <- m[ 4 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 2 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 5 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 6 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 7 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 8 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 9 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
# Create a simple vector.
# c stands for combine
# 1:12 generates values from 1 to 12
myVar <- c(1:12)
myVar
myMatrix <- matrix(1:12, 2, 6)
myMatrix
# Matrix is just a Vector with dim attribute
dim(myVar) <- c(2,6)
myVar
# Array with 3 dimensions
# Also set dimnames
dim(myVar) <- c(2,3,2)
dimnames(myVar)[[1]] <- list("R1","R2")
dimnames(myVar)[[2]] <- list("A","B", "C")
dimnames(myVar)[[3]] <- list("M1", "M2")
myVar
attributes(myVar)
# Back to simple vector
dim(myVar) <- NULL
myVar
# A scalar is just a vector with 1 element.
myVar <- 1
myVar
myVector <- c("low", "high", "med", "low")
# Create a Factor
myFactor <- factor(myVector)
myFactor
# Create an ordered Factor
myOrderedFactor <- factor(myVector, levels = c("low", "med", "high"), ordered = TRUE)
myOrderedFactor
attributes(myFactor)
attributes(myOrderedFactor)
# Data Frame
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
# A list can hold different types, even functions
f <- function(x) { return(x*2) }
myList <- list(TRUE, 123L, 6.5, c(1,2,3), f)
library(gtools)
m <- permutations(n = 3, r = 3)
View(m)
m[1,]   # 1st row.  Vector of numbers
m[,2]   # 2nd col.  Vector of numbers
1:3       # Vector with values 1,2,3
m[1:3,]   # Rows 1,2,3
c(T,T,T,T,F,F)     # Vector of logical
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              # Vector (Vectorize)
m[,1] + m[,2] == m[,3]     # Test rows (Vectorize)
m[m[,1] + m[,2] == m[,3],] # Select rows matching test
m <- permutations(n = 9, r = 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
View(m.a)
df <- data.frame(permutations(9, 9))
df.a <- subset(df, 3 * (X1*1000 + X2*100 + X3*10 + X4) ==
(X5*10000 + X6*1000 + X7*100 + X8*10 + X9))
View(df.a)
View(df.a)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
View(rolls)
x <- rolls[6028,]
View(x)
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
outcome <- (ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
View(outcome)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
View(rolls)
m <- mean(rolls$outcomes)
m <- permutations(n = 10, r = 2)
View(m)
m <- permutations(n = 10, r = 2) - 1
View(m)
View(m)
colnames(m) <- c("S", "E", "N", "D", "M", "O", "R", "Y")
m <- permutations(n = 10, r = 8) - 1
colnames(m) <- c("S", "E", "N", "D", "M", "O", "R", "Y")
View(m)
View(m)
View(m)
View(m)
m <- as.data.frame(m)
View(m)
View(m)
m$send <- 10 * m$S + m$E
View(m)
m <- permutations(n = 10, r = 8) - 1
colnames(m) <- c("S", "E", "N", "D", "M", "O", "R", "Y")
# m <- as.data.frame(m)
m$send <- 10 * m$S + m$E
m[1,]
m <- as.data.frame(permutations(n = 10, r = 8) - 1)
colnames(m) <- c("S", "E", "N", "D", "M", "O", "R", "Y")
m$send <- 1000 * m$S + 100 * m$E + 10 * m$N + m$D
m$more <- 1000 * m$M + 100 * m$O + 10 * m$R + m$E
m$more <- 10000 * m$M + 1000 * m$O + 100 * m$N + 10 * m$E + m$Y
m[1,]
m$send <- 1000 * m$S + 100 * m$E + 10 * m$N + m$D
m$more <- 1000 * m$M + 100 * m$O + 10 * m$R + m$E
m$money <- 10000 * m$M + 1000 * m$O + 100 * m$N + 10 * m$E + m$Y
m[m$send + m$more = m$money,]
m[m$send + m$more == m$money,]
m[m$send + m$more == m$money && m$M != 0,]
m[m$send + m$more == m$money && m$M == 0,]
m[m$send + m$more == m$money,][1,]
m[m$send + m$more == m$money,][m$M != 0,]
m[m$send + m$more == m$money,][1,]
a[m$M == 0]
a <- m[m$send + m$more == m$money,]
a[m$M == 0]
a[a$M == 0]
View(a)
a[a$M == 0,]
a[a$M != 0,]
answer1 <- m[m$send + m$more == m$money,]
answer2 <- answer1[answer1$M != 0,]
answer1 <- m[m$send + m$more == m$money,]
answer2 <- answer1[answer1$M != 0,]
View(answer2)
answer2
