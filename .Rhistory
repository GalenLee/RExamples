library()
library(combinat)
help(package="combinat")
?combn
search()
utils::combn(1:5,2)
combinat::combn(1:5,2)
library()
library(combinat)
library(combinat)
permn(1:9)
detach(combinat)
detach("combinat")
detach("package:combinat")
permn(1:9)
help(package="gtools")
help(package="gtools")
install.packages("combinat")
install.packages("combinat")
help(package="gtools")
install.packages("gtools")
help(package="gtools")
library(gtools)
permutations(5,2)
permutations(5,5)
permutations(5,5)
library(gtools)
permutations(5,5)
digits <- permutations(9,9)
View(digits)
View(digits)
digits[1,]
a <- digits[1,]
apply(digits, 1, function(x) x[1]+x[2])
rm(digitis)
rm(digitis)
rm(digits)
rm(a)
df <- data.frame(permutations(9,9))
?filter
View(df)
?subset
subset(df, x1 == 1)
View(df)
subset(df, [,1] == 1)
subset(df, $1 == 1)
subset(df, [1] == 1)
subset(df, 1 == 1)
subset(df, 1 == 1 && 2 ==2)
subset(df, 1 == 1 && 2 ==2 && 9==9)
df[,1] == 1
a <- df[,1] == 1
a <- df[,1] + df[,2]
a <- df[,1] + df[,2] == 4
a <-df[ df[,1] + df[,2] == 4, ]
mat <- data.frame(permutations(9,9))
mat <- permutations(9,9)
mat <- permutations(9,9)
a <- m[m[,1]+m[,]==4,]
m <- permutations(9,9)
a <- m[m[,1]+m[,]==4,]
c<-5.5%%1
a <- m[m[,1]+m[,] %% 1 == 0,]
a <- m[(m[,1]+m[,]) %% 1 == 0,]
a <- m[(m[,1]+m[,]) == 0,]
a <- m[m[,1]+m[,] == 4,]
m <- permutations(9,9)
a <- m[ (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4])
== 4,]
a <- m[(m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) /
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]) == 4,]
a <- m[(m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) /
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]) %% 1 == 0,]
View(a)
a <- 3/5
a <- m[m[,1]==9,]
View(a)
a <- m[m[,1]/m[,2] %% 1 == 0,]
a <- m[m[,1]/m[,2] > 1,]
View(a)
a <- m[m[,1]/m[,2] %% 3 == 0,]
a <- m[m[,1] %% m[,2] == 0,]
View(a)
m <- permutations(9,9)
a <- m[(m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) %%
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]) == 0,]
a <- m[(m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) %%
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]) == 0,]
a <- m[(m[,1]*10 + m[,2]) %% (m[,3]*10 + m[,4]) == 0,]
source('C:/Source/GitHub/RExamples/RExamples.R')
View(a)
a <- m[(m[,1]*10 + m[,2]) %% (m[,3]*10 + m[,4]) == 0,]
View(a)
a <- m[ (m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]) %%
(m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) == 0,]
View(a)
a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(a)
names(df)
a <- subset(df, X1==9)
m <- permutations(9, 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
df <- data.frame(permutations(9,9))
df.a <- subset(df, 3 * (X1*1000 + X2*100 + X3*10 + X4) ==
(X5*10000 + X6*1000 + X7*100 + X8*10 + X9))
View(df.a)
View(m)
View(df)
View(df.a)
install.packages("gtools")
help(package="gtools")
library(gtools)
permutations(5,5)
# install.packages("gtools")
# help(package="gtools")
library(gtools)
df <- data.frame(permutations(9, 9))
df.a <- subset(df, 3 * (X1*1000 + X2*100 + X3*10 + X4) ==
(X5*10000 + X6*1000 + X7*100 + X8*10 + X9))
m <- permutations(9, 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(df.a)
?choose
?choose
choose(5, 2)
matrix(1:6,1:6)
help(package="gtools")
?expand.grid
expand.grid(1:6,1:6,1:6)
a <- expand.grid(1:6,1:6,1:6)
as.numeric(a[1,])
b <- as.numeric(a[1,])
b <- as.numeric(a[2,])
sort(b)
b <- as.numeric(a[100,])
sort(b)
sort(b[1:2])
a <- expand.grid(1:6,1:6,1:6,1:6,1:6)
6*6*6*6*6
a <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
b <- apply(a, sum)
?apply
?lapply
?apply
?apply
b <- apply(a, 1, sum)
b[1,]
a[1,]
c <-a[1,]
f <- function(x) {
return(x[1] + 10)
}
f <- function(x) {
return(x[1] + 10)
}
b <- apply(a, 1, f)
View(a)
a$outcome <- b
View(a)
roles <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
roles$outcomes <- apply(roles, 1, calcOutcome)
View(roles)
calcOutcome <- function(x) {
return(x[1] + 10)
}
roles$outcomes <- apply(roles, 1, calcOutcome)
View(roles)
mean(roles$outcomes)
calcOutcome <- function(x) {
att <- sort(x[1:3])
def <- sort(x[4:5])
val <- ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1)
return(val)
roles$outcomes <- apply(roles, 1, calcOutcome)
mean(roles$outcomes)
mean(roles$outcomes)
calcOutcome <- function(x) {
att <- sort(x[1:3])
def <- sort(x[4:5])
val <- ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1)
return(val)
}
roles <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
roles$outcomes <- apply(roles, 1, calcOutcome)
mean(roles$outcomes)
calcOutcome <- function(x) {
att <- sort(x[1:3])
def <- sort(x[4:5])
val <- ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1)
return(val)
}
roles <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
roles$outcomes <- apply(roles, 1, calcOutcome)
mean(roles$outcomes)
calcOutcome <- function(x) {
att <- sort(x[1:3])
def <- sort(x[4:5])
val <- ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1)
return(val)
}
roles <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
roles$outcomes <- apply(roles, 1, calcOutcome)
mean(roles$outcomes)
source('C:/Source/GitHub/RExamples/Risk.R', echo=TRUE)
source('C:/Source/GitHub/RExamples/Risk.R', echo=TRUE)
source('C:/Source/GitHub/RExamples/Risk.R')
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
m <- mean(rolls$outcomes)
ggplot(data=rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x=sprintf("Attacker Outcome: EV = %f", m), y="Count")
library(ggplot2)
ggplot(data=rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x=sprintf("Attacker Outcome: EV = %f", m), y="Count")
ggplot(data=rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue", col = "black") +
labs(title = "Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x = sprintf("Attacker Outcome: EV = %f", m), y = "Count")
ggplot(data=rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue") +
labs(title = "Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x = sprintf("Attacker Outcome: EV = %f", m), y = "Count")
ggplot(data = rolls, aes(rolls$outcomes))
ggplot(data = rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue", col = "black")
View(rolls)
library(ggplot2)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
library(ggplot2)
m <- permutations(9, 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
library(gtools)
m <- permutations(9, 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m)
dev.off()
# install.packages("ggplot2")
# install.packages("gridExtra")
library(grid)
library(gridExtra)
library(ggplot2)
compare1 <- function(att, def) {
return(ifelse(att[1] > def[1], 1, -1))
}
compare2 <- function(att, def) {
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
}
calcOutcome <- function(rolls, attDiceIdx, defDiceIdx, compareFun) {
outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[attDiceIdx], decreasing = TRUE)
def <- sort(x[defDiceIdx], decreasing = TRUE)
return(compareFun(att, def))
})
return (as.data.frame(outcomes))
}
rolls32 <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
df32 <- calcOutcome(rolls32, 1:3, 4:5, compare2)
g32 <- ggplot(data=df32, aes(df32$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 3 Dice, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f", mean(df32$outcomes)), y="Count")
rolls31 <- expand.grid(1:6, 1:6, 1:6, 1:6)
df31 <- calcOutcome(rolls31, 1:3, 4:4, compare1)
g31 <- ggplot(data=df31, aes(df31$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 3 Dice, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df31$outcomes)), y="Count")
rolls22 <- expand.grid(1:6, 1:6, 1:6, 1:6)
df22 <- calcOutcome(rolls22, 1:2, 3:4, compare2)
g22 <- ggplot(data=df22, aes(df22$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 2 Dice, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f", mean(df22$outcomes)), y="Count")
rolls21 <- expand.grid(1:6, 1:6, 1:6)
df21 <- calcOutcome(rolls22, 1:2, 3:3, compare1)
g21 <- ggplot(data=df21, aes(df21$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 2 Dice, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df21$outcomes)), y="Count")
rolls12 <- expand.grid(1:6, 1:6, 1:6)
df12 <- calcOutcome(rolls12, 1:1, 2:3, compare1)
g12 <- ggplot(data=df12, aes(df12$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 1 Die, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df12$outcomes)), y="Count")
rolls11 <- expand.grid(1:6, 1:6)
df11 <- calcOutcome(rolls12, 1:1, 2:2, compare1)
g11 <- ggplot(data=df11, aes(df11$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 1 Die, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df11$outcomes)), y="Count")
grid.arrange(g32, g31, g22, g21, g12, g11,  ncol=2, nrow = 3, top = "Risk Attacker Outcomes")
rolls[1,]
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
m <- mean(rolls$outcomes)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
m <- mean(rolls$outcomes)
rolls[1,]
View(rolls)
rolls[6028,]
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
x <- rolls[6028,]
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
outcome <- (ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
View(x)
View(rolls)
1:3
m <- permutations(9, 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m)
?permutations
m <- permutations(n = 9, r = 9)
m[,1]
m[,9]
3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9])
m <- permutations(n = 4, r = 4)
View(m)
View(m)
m <- permutations(n = 3, r = 3)
View(m)
View(m)
m[1,]
m[,2]
m[1,2]
m[1:3,]
m[,1] > m[,2]
m[,1] > m[,2] > m[,3]
m[,1] > m[,2] && m[2,] > m[,3]
m[,1] > m[,2] && m[2,] > m[,3]
m[,1] + m[,2] == m[,3]
m[c(T,T,T,T,T,T),]
a <- c(T,T,T,T,T,T)
c(T,T,T,T,T,T)
m[c(T,T,T,T,T,T),]
m[,1] + m[,2] == m[,3]
m[m[,1] + m[,2] == m[,3],]
str(c(T,T,T,T,T,T))
m[1,]   # 1st row
c(T,T,T,T,T,T)
m[1:3,] # Rows 1,2,3
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              #
m[1,2]  # Value at row = 1 and col = 2
m[1,]   # 1st row
m[,2]   # 2nd col
m[1,2]  # Value at row = 1 and col = 2
m[1:3,] # Rows 1,2,3
c(T,T,T,T,F,F)     # ARRAY of logical
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              # ARRAY or VECTOR
m[,1] + m[,2] == m[,3]     # Test rows (Vectorize)
m[m[,1] + m[,2] == m[,3],] # Select rows matching test
# Load package gtools
library(gtools)
# Create a Matrix
m <- permutations(n = 9, r = 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
df <- data.frame(permutations(9, 9))
df.a <- subset(df, 3 * (X1*1000 + X2*100 + X3*10 + X4) ==
(X5*10000 + X6*1000 + X7*100 + X8*10 + X9))
View(df.a)
View(m.a)
m[1,]   # 1st row
m[1,]   # 1st row.  ARRAY of numbers
m[1,2]  # Value at row = 1 and col = 2
m[1,2]  # Value at row = 1 and col = 2.  ARRAY of 1.
m[1:3,] # Rows 1,2,3
m <- permutations(n = 3, r = 3)
c(T,T,T,T,F,F)     # ARRAY of logical
m[c(T,T,T,T,F,F),] # Select rows 1,2,3,4
m[,1] + m[,2]              # ARRAY or Vector (Vectorize)
m[,1] + m[,2] == m[,3]     # Test rows (Vectorize)
m[m[,1] + m[,2] == m[,3],] # Select rows matching test
1:3
c(1,2,3)
m <- matrix(6,3)
View(m)
m <- matrix(0,6, 3)
View(m)
m <- matrix(c(1,1,1,2,2,2), 6, 3)
View(m)
m <- matrix(c(1,2,3,4,5,6), 2, 3)
View(m)
c(1,2,3,4,5,6)
matrix(c(1,2,3,4,5,6), 2, 3)
m <- permutations(n = 9, r = 9)
m.a <- m[ 3 * (m[,1]*1000 + m[,2]*100 + m[,3]*10 + m[,4]) ==
(m[,5]*10000 + m[,6]*1000 + m[,7]*100 + m[,8]*10 + m[,9]),]
View(m.a)
c(1,2,3,4,5,6)
matrix(c(1,2,3,4,5,6), 2, 3)
m <- permutations(n = 3, r = 3)
m[1,]   # 1st row.  ARRAY of numbers
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
x <- rolls[6028,]
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
outcome <- (ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
View(rolls)
View(x)
View(att)
View(outcome)
# install.packages("ggplot2")
# install.packages("gridExtra")
library(grid)
library(gridExtra)
library(ggplot2)
compare1 <- function(att, def) {
return(ifelse(att[1] > def[1], 1, -1))
}
compare2 <- function(att, def) {
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
}
calcOutcome <- function(rolls, attDiceIdx, defDiceIdx, compareFun) {
outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[attDiceIdx], decreasing = TRUE)
def <- sort(x[defDiceIdx], decreasing = TRUE)
return(compareFun(att, def))
})
return (as.data.frame(outcomes))
}
rolls32 <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
df32 <- calcOutcome(rolls32, 1:3, 4:5, compare2)
g32 <- ggplot(data=df32, aes(df32$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 3 Dice, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f", mean(df32$outcomes)), y="Count")
rolls31 <- expand.grid(1:6, 1:6, 1:6, 1:6)
df31 <- calcOutcome(rolls31, 1:3, 4:4, compare1)
g31 <- ggplot(data=df31, aes(df31$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 3 Dice, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df31$outcomes)), y="Count")
rolls22 <- expand.grid(1:6, 1:6, 1:6, 1:6)
df22 <- calcOutcome(rolls22, 1:2, 3:4, compare2)
g22 <- ggplot(data=df22, aes(df22$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 2 Dice, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f", mean(df22$outcomes)), y="Count")
rolls21 <- expand.grid(1:6, 1:6, 1:6)
df21 <- calcOutcome(rolls22, 1:2, 3:3, compare1)
g21 <- ggplot(data=df21, aes(df21$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightblue", col="black") +
labs(title="Attacker 2 Dice, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df21$outcomes)), y="Count")
rolls12 <- expand.grid(1:6, 1:6, 1:6)
df12 <- calcOutcome(rolls12, 1:1, 2:3, compare1)
g12 <- ggplot(data=df12, aes(df12$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 1 Die, Defender 2 Dice") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df12$outcomes)), y="Count")
rolls11 <- expand.grid(1:6, 1:6)
df11 <- calcOutcome(rolls12, 1:1, 2:2, compare1)
g11 <- ggplot(data=df11, aes(df11$outcomes)) +
geom_histogram(binwidth=1,boundary=-0.5, fill="lightpink", col="black") +
labs(title="Attacker 1 Die, Defender 1 Die") +
labs(x=sprintf("Attacker EV = %f x 2", mean(df11$outcomes)), y="Count")
grid.arrange(g32, g31, g22, g21, g12, g11,  ncol=2, nrow = 3, top = "Risk Attacker Outcomes")
# dev.off()
# install.packages("ggplot2")
library(ggplot2)
rolls <- expand.grid(1:6, 1:6, 1:6, 1:6, 1:6)
rolls$outcomes <- apply(rolls, 1, function(x) {
att <- sort(x[1:3], decreasing = TRUE)
def <- sort(x[4:5], decreasing = TRUE)
return(ifelse(att[1] > def[1], 1, -1) +
ifelse(att[2] > def[2], 1, -1))
})
m <- mean(rolls$outcomes)
ggplot(data = rolls, aes(rolls$outcomes)) +
geom_histogram(binwidth = 1, boundary = -0.5, fill="lightblue", col = "black") +
labs(title = "Outcomes: Attacker Rolls 3 Dice, Defender Rolls 2 Dice") +
labs(x = sprintf("Attacker Outcome: EV = %f", m), y = "Count")
